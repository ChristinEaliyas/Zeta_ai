{"ast":null,"code":"var _jsxFileName = \"/home/amal/Desktop/lenin - project/frontend/src/components/VideoPlayer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoPlayer() {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const videoId = \"\"; // Predefined YouTube video ID (replace with your desired video ID)\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      // Full viewport height\n      width: \"100vw\" // Full viewport width\n    },\n    children: /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: videoId,\n      opts: {\n        width: \"100%\",\n        // Full width of the container\n        height: \"100%\",\n        // Full height of the container\n        playerVars: {\n          autoplay: 1\n        } // Auto-play the video\n      },\n      onPlay: () => setIsPlaying(true),\n      onPause: () => setIsPlaying(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoPlayer, \"dxr5RgzQJlMZkbQdHY9iHZ+FF0w=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["useState","YouTube","jsxDEV","_jsxDEV","VideoPlayer","_s","isPlaying","setIsPlaying","videoId","togglePlayPause","style","display","flexDirection","alignItems","justifyContent","height","width","children","opts","playerVars","autoplay","onPlay","onPause","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/amal/Desktop/lenin - project/frontend/src/components/VideoPlayer.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport YouTube from \"react-youtube\";\n\nfunction VideoPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const videoId = \"\"; // Predefined YouTube video ID (replace with your desired video ID)\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100vh\", // Full viewport height\n        width: \"100vw\", // Full viewport width\n      }}\n    >\n      <YouTube\n        videoId={videoId}\n        opts={{\n          width: \"100%\", // Full width of the container\n          height: \"100%\", // Full height of the container\n          playerVars: { autoplay: 1 }, // Auto-play the video\n        }}\n        onPlay={() => setIsPlaying(true)}\n        onPause={() => setIsPlaying(false)}\n      />\n    </div>\n  );\n}\n\nexport default VideoPlayer;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMQ,OAAO,GAAG,EAAE,CAAC,CAAC;;EAEpB,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BF,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEH,OAAA;IACEO,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,UAAU,EAAE,QAAQ;MACpBC,cAAc,EAAE,QAAQ;MACxBC,MAAM,EAAE,OAAO;MAAE;MACjBC,KAAK,EAAE,OAAO,CAAE;IAClB,CAAE;IAAAC,QAAA,eAEFd,OAAA,CAACF,OAAO;MACNO,OAAO,EAAEA,OAAQ;MACjBU,IAAI,EAAE;QACJF,KAAK,EAAE,MAAM;QAAE;QACfD,MAAM,EAAE,MAAM;QAAE;QAChBI,UAAU,EAAE;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAE;MAC/B,CAAE;MACFC,MAAM,EAAEA,CAAA,KAAMd,YAAY,CAAC,IAAI,CAAE;MACjCe,OAAO,EAAEA,CAAA,KAAMf,YAAY,CAAC,KAAK;IAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrB,EAAA,CA/BQD,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAiCpB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}